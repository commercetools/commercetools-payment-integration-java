buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
        classpath 'org.ajoberstar:gradle-git-publish:1.0.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
id 'org.ajoberstar.git-publish' version '3.0.0'
id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}


final depVersions = [
        commercetoolsSdkJvm: '1.53.0',
        assertJ            : '3.6.2',
        mockito            : '2.7.22',
        junit              : '4.12',
        slf4j              : '1.7.25'
]


// these properties reused by external configurations in build-script directory,
// that's why we use ext. global prefix
ext.scmProjectName = rootProject.name
ext.scmRepo = 'github.com'

ext.scmProjectPath = "commercetools/${scmProjectName}.git"  // github relative path with .git extension
ext.scmProjectUrl = "https://$scmRepo/$scmProjectPath"      // just as web-page
ext.scmHttpsUrl = "https://$scmRepo/$scmProjectPath"        // common VCS read access
ext.scmSshUrl = "git@$scmRepo:$scmProjectPath"              // developers VCS read-write repo

ext.SNAPSHOT = 'SNAPSHOT'
ext.SNAPSHOT_SUFFIX = "-$SNAPSHOT"

// dev version patch. Real version should be specified as Java property -Dbuild.version=XXX
ext.versionWIP = "development$SNAPSHOT_SUFFIX"

// version should be defined from runtime property, e.g. should be passed to the build like -Dbuild.version=$TRAVIS_TAG
version = System.getProperty('build.version') ?: versionWIP

println "\nEffective entire project build version: ${version}\n"

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }

    apply plugin: 'java'

    group = 'com.commercetools.payment'

    version = rootProject.version

    description "The commercetools java payment project intend is to make payment integration easy"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

subprojects {

    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    // this is an important plugin for maven/bintray publishing to avoid "all dependencies are runtime scope":
    // see https://github.com/bintray/gradle-bintray-plugin#maven-publications and https://github.com/gradle/gradle/issues/1118
    apply plugin: 'java-library'

    apply plugin: 'com.jfrog.bintray'

    // package sources and javadoc to jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    install.dependsOn build

    build.doLast {
        println "\nEffective project \"${project.version}\" built version: ${project.version}\n"
    }
    apply from: "$rootDir/build-scripts/plugins.gradle"
    apply from: "$rootDir/build-scripts/maven-publish.gradle"
    apply from: "$rootDir/build-scripts/nexus-publish.gradle"
}

project(':common') {
    description "Common API interfaces and methods for $rootProject.name"

    dependencies {
        compile "com.commercetools.sdk.jvm.core:commercetools-models:$depVersions.commercetoolsSdkJvm"
        compile "com.commercetools.sdk.jvm.core:commercetools-java-client:$depVersions.commercetoolsSdkJvm"

        testCompile "junit:junit:$depVersions.junit"
        testCompile "org.assertj:assertj-core:$depVersions.assertJ"
        testCompile "org.mockito:mockito-core:$depVersions.mockito"
    }
}

project(':nopsp-adapter') {
    description "Simple mock payment implementation (\"free-to-pay\") for $rootProject.name"

    dependencies {
        compile project(':common')
    }
}

project(':payone-adapter') {
    description "Implementation of Payone PSP specific methods and transactions."

    dependencies {
        compile project(':common')

        testCompile "junit:junit:$depVersions.junit"
        testCompile "org.assertj:assertj-core:$depVersions.assertJ"
        testCompile "org.mockito:mockito-core:$depVersions.mockito"
    }
}

project(':') {

    description "Unit and Integration tests to verify $rootProject.name build"

    // aggregate all javadocs to project.buildDir/docs/javadoc
    // see https://github.com/nebula-plugins/gradle-aggregate-javadocs-plugin
    apply plugin: 'nebula-aggregate-javadocs'
    apply plugin: 'org.ajoberstar.git-publish'

    // Integration tests configuration
    // TODO: carry out to a separate sub-project or task

    dependencies {
        compile project(':common'), project(':nopsp-adapter'), project(':payone-adapter')

        testCompile "junit:junit:$depVersions.junit"
        testCompile "org.assertj:assertj-core:$depVersions.assertJ"
        testCompile "org.slf4j:slf4j-simple:$depVersions.slf4j"
        testCompile "org.mockito:mockito-core:$depVersions.mockito"
    }

    // run the integration tests after all other subtasks are built
    configure(subprojects) { subProj ->
        subProj.tasks.findAll { it.name.endsWith("build") }
                .each { subProjTask ->
            rootProject.compileJava.mustRunAfter.add(subProjTask)
        }
    }

    sourceSets {
        integrationTest {
            java {
                //compileClasspath += main.output + test.output
                //runtimeClasspath += main.output + test.output
                srcDir file('src/it/') // TODO: move to src/it/java, or even better to integration-test/src/it/java
            }
            resources.srcDir file('src/it/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        //outputs.upToDateWhen { false } // uncommect this section if you want re-run the tests every build, even when no changes have been done
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    apply from: "$rootDir/build-scripts/git-publish.gradle"
}

void validateVersion(String prefix) throws InvalidUserDataException {
    // validate version is set and not a default version
    if (!rootProject.version?.trim() || rootProject.version == versionWIP) {
        throw new InvalidUserDataException(
                "$prefix.\nPls, specify -Dbuild.version=<version-name> as the build argument.\n" +
                "Current version is \"$rootProject.version\"")
    }
}
